# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_export.ipynb.

# %% ../01_export.ipynb 1
from __future__ import annotations

# %% auto 0
__all__ = ['ExportTestProc', 'get_directive', 'convert_pytest', 'convert_unittest', 'construct_imports', 'create_test_modules']

# %% ../01_export.ipynb 4
from nbprocess.process import *
from nbprocess.read import *
from nbprocess.imports import *
from nbprocess.maker import *

from nbprocess.processors import _default_exp

# %% ../01_export.ipynb 7
from collections import defaultdict
from fastcore.foundation import L, ifnone
from execnb.nbio import *

class ExportTestProc:
    "A test proc that watches for `#|default_exp` and `#|test`"
    def __init__(self): self.tests = defaultdict(L)
    def _default_exp_(self, nbp, cell, exp_to): self.default_exp = f'test_{exp_to}'
    def _test_(self, nbp, cell, exp_to=None, nm=None, tst_cls=None): self.tests[self.default_exp].append(nbp.cell)

# %% ../01_export.ipynb 8
_re_test = re.compile(r'#\|\s*test\s*$', re.MULTILINE)
_re_import = re.compile(r'#\|\s*test\s*import\s*$', re.MULTILINE)
_tab = "    "

# %% ../01_export.ipynb 9
def get_directive(cell, key): 
    "Extract a top level directive from `cell`"
    return cell.directives_.get(key, None)

def _is_test_cell(cell): return cell.cell_type == "code" and nested_idx(cell, "test")

# %% ../01_export.ipynb 10
def convert_pytest(cell):
    "Wraps cell contents into a pytest function"
    if _is_test_cell(cell) and not nested_idx(cell.directives_, "test", "import"):
        directives = get_directive(cell, "test")
        content = '\n'.join([f"{_tab}{c}" for c in cell.source.split("\n")])
        cell.source = f'def test_{directive[0]}(self):\n{content}'

# %% ../01_export.ipynb 11
def convert_unittest(cell):
    "Wraps cell contents into a unittest test suite"
    convert_pytest(cell)
    if _is_test_cell(cell):
        if nested_idx(cell.directives_, "test", "case"):
            directives = get_directive(cell, "test")
            cell.source = f'class {cell.directives_[1]}({cell.directives_[2]})'
        elif not nested_idx(cell.directives_, "test", "import"):
            cell.source = '\n'.join([f'{_tab}{c}' for c in cell.source.split("\n")])

# %% ../01_export.ipynb 12
def construct_imports(nb):
    "Generates the test imports for the notebook"
    libname = get_config().lib_name
    exp = _default_exp(nb)
    imports = ['#| test import\n', f'from {libname}.{exp} import *\n','import unittest']
    nb.cells.insert(1, mk_cell(imports))

# %% ../01_export.ipynb 14
def create_test_modules(path,dest,debug=False,mod_maker=ModuleMaker):
    exp = ExportTestProc()
    nb = NBProcessor(path, [convert_unittest, exp], preprocs=construct_imports)
    nb.process()
    is_new = True
    for mod,cells in exp.tests.items():
        mm = mod_maker(dest=dest, name=exp.default_exp, nb_path=path, is_new=is_new)
        mm.make(cells)
        is_new = False
