# AUTOGENERATED! DO NOT EDIT! File to edit: ../03_typedispatch.ipynb.

# %% auto 0
__all__ = ['get_dispatched', 'docstring', 'get_docmented_func', 'show_doc']

# %% ../03_typedispatch.ipynb 2
import inspect
from inspect import getdoc
from operator import is_not
from functools import partial

import fastcore
from fastcore.basics import *
from fastcore.foundation import *
from fastcore.dispatch import typedispatch
from fastcore.docments import _docments, docments


from nbprocess.showdoc import _wrap_sig, _fmt_sig, _signature
from nbprocess.showdoc import *
from nbprocess.read import get_config 

# %% ../03_typedispatch.ipynb 9
@patch
def get_annotation(self:inspect.Signature,
    key:str,
):
    "Returns the annotation of `key` in `self`"
    return self.parameters[key].annotation

# %% ../03_typedispatch.ipynb 10
def get_dispatched(sigs:L):
    "Returns an ordered dictionary of key:types for each param in dispatch_signatures"
    var2types = {}
    for arg in sigs[0].parameters.keys():
        var2types[arg] = L(sigs).map(Self.get_annotation(arg))
    return var2types

# %% ../03_typedispatch.ipynb 11
def _dispatch_annotations(func):
    "Returns an ordered dictionary of key:types of all dispatch argument combinations in `func`"
    return get_dispatched(trace_dispatch(func))

# %% ../03_typedispatch.ipynb 13
from fastcore.docments import *

# %% ../03_typedispatch.ipynb 15
def _dispatch_doc(func):
    "Returns the first docstring in a list of typedispatch'd functions"
    type_dict = nested_attr(func, "funcs.d")
    return first(L(type_dict.keys()).map(
            lambda x: [
                inspect.getdoc(o) 
                for o in type_dict[x].d.values()
            ]
        ).concat().filter(partial(is_not, None)))

# %% ../03_typedispatch.ipynb 17
def docstring(sym):
    "Get docstring for `sym` for functions ad classes"
    if isinstance(sym, str): return sym
    if nested_attr(sym, "funcs.d"): return _dispatch_doc(sym)
    res = getdoc(sym)
    if not res and isclass(sym): res = getdoc(sym.__init__)
    return res or ""

# %% ../03_typedispatch.ipynb 19
def get_docmented_func(funcs):
    "Finds and returns the first func in `funcs` that has docments"
    dmented = None
    for func in L(f.d.values() for f in type_sum.funcs.d.values()).concat():
        dment = _docments(func, returns=False)
        if not all([k["docment"] == None for k in dment.values()]):
            return func
    return False

@patch
def __init__(self:DocmentTbl, obj, verbose=True, returns=True, dispatch=False):
    self.verbose = verbose
    self.returns = False if isdataclass(obj) else returns
    self.params = L(_signature(obj).parameters.keys())
    try:
        if dispatch:
            # Find the first set of docments and return them
            obj = get_docmented_func(dispatch)
            _dm = docments(obj, full=True, returns=returns)
            for k in _dm.keys(): _dm[k]["anno"] = inspect._empty
        else: _dm = docments(obj, full=True, returns=returns)
    except: _dm = {}
    if 'self' in _dm: del _dm['self']
    for d in _dm.values(): d['docment'] = ifnone(d['docment'], inspect._empty)
    self.dm = _dm

# %% ../03_typedispatch.ipynb 20
@patch
def __init__(self:ShowDocRenderer, sym, disp:bool=True):
    store_attr()
    self.nm = qual_name(sym)
    self.is_dispatch = nested_attr(sym, "funcs.d", False)
    self.isfunc = inspect.isfunction(sym)
    if self.is_dispatch:
        funcs = nested_attr(sym, "funcs.d")
        self.sigs = trace_dispatch(funcs)
        sym = first(L(f.d.values() for f in funcs.values()).concat())
        self.sig = _signature(sym)
        self.nm = qual_name(sym)
    else: self.sig = _signature(sym)
    self.docs = docstring(sym)
    self.dm = DocmentTbl(sym, dispatch=self.sigs if self.is_dispatch else False)

# %% ../03_typedispatch.ipynb 21
@patch
def _repr_markdown_(self:BasicMarkdownRenderer):
    doc = '---\n\n'
    if self.isfunc: doc += "#"
    doc += f'### {self.nm}\n\n'
    if self.is_dispatch:
        for sig in self.sigs: 
            sig = _wrap_sig(f"{self.nm} {_fmt_sig(sig)}")
            doc += f'{sig}\n'
    if self.docs: doc += f"\n\n{self.docs.splitlines()[0]}"
    if self.dm.has_docment: doc += f"\n\n{self.dm}"
    return doc

# %% ../03_typedispatch.ipynb 22
def show_doc(sym, disp=True, renderer=None):
    if renderer is None: renderer = get_config().get('renderer', BasicMarkdownRenderer)
    elif isinstance(renderer,str):
        p,m = renderer.rsplit('.', 1)
        renderer = getattr(import_module(p), m)
    return renderer(sym or show_doc, disp=disp)
